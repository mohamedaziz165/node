Welcome to Node.js v22.12.0.
Type ".help" for more information.
> console.log("HELLO WORLD");
HELLO WORLD
undefined
> const http = require('http');
undefined
>
> const server = http.createServer((req, res) => {
...   res.writeHead(200, { 'Content-Type': 'text/html' });
...   res.end('<h1>Hello Node !!!!</h1>\n');
... });
undefined
>
> server.listen(3000, () => {
...   console.log('Server running at http://localhost:3000/');
... });
Server {
  maxHeaderSize: undefined,
  insecureHTTPParser: undefined,
  requestTimeout: 300000,
  headersTimeout: 60000,
  keepAliveTimeout: 5000,
  connectionsCheckingInterval: 30000,
  requireHostHeader: true,
  joinDuplicateHeaders: undefined,
  rejectNonStandardBodyWrites: false,
  _events: [Object: null prototype] {
    request: [Function (anonymous)],
    connection: [Function: connectionListener],
    listening: [ [Function: setupConnectionsTracking], [Function] ]
  },
  _eventsCount: 3,
  _maxListeners: undefined,
  _connections: 0,
  _handle: null,
  _usingWorkers: false,
  _workers: [],
  _unref: false,
  _listeningId: 2,
  allowHalfOpen: true,
  pauseOnConnect: false,
  noDelay: true,
  keepAlive: false,
  keepAliveInitialDelay: 0,
  highWaterMark: 16384,
  httpAllowHalfOpen: false,
  timeout: 0,
  maxHeadersCount: null,
  maxRequestsPerSocket: 0,
  [Symbol(IncomingMessage)]: [Function: IncomingMessage],
  [Symbol(ServerResponse)]: [Function: ServerResponse],
  [Symbol(shapeMode)]: false,
  [Symbol(kCapture)]: false,
  [Symbol(async_id_symbol)]: 36,
  [Symbol(kUniqueHeaders)]: null
}
> Uncaught Error: listen EADDRINUSE: address already in use :::3000
    at Server.setupListenHandle [as _listen2] (node:net:1912:16)
    at listenInCluster (node:net:1969:12)
    at Server.listen (node:net:2074:7) {
  code: 'EADDRINUSE',
  errno: -4091,
  syscall: 'listen',
  address: '::',
  port: 3000,
  domainEmitter: Server {
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    requestTimeout: 300000,
    headersTimeout: 60000,
    keepAliveTimeout: 5000,
    connectionsCheckingInterval: 30000,
    requireHostHeader: true,
    joinDuplicateHeaders: undefined,
    rejectNonStandardBodyWrites: false,
    _events: [Object: null prototype] {
      request: [Function (anonymous)],
      connection: [Function: connectionListener],
      listening: [Array]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _connections: 0,
    _handle: null,
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    _listeningId: 2,
    allowHalfOpen: true,
    pauseOnConnect: false,
    noDelay: true,
    keepAlive: false,
    keepAliveInitialDelay: 0,
    highWaterMark: 16384,
    httpAllowHalfOpen: false,
    timeout: 0,
    maxHeadersCount: null,
    maxRequestsPerSocket: 0,
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(async_id_symbol)]: 36,
    [Symbol(kUniqueHeaders)]: null
  },
  domainThrown: false
}
>
